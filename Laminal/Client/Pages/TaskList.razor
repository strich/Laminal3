@page "/tasklist"
@using Laminal.Shared.Services
@using Stl.Fusion.Authentication;
@using Stl.Fusion.Blazor
@using System.Collections.ObjectModel;
@using Stl.Fusion;
@using Stl.Fusion.UI;
@inherits MixedStateComponent<TaskList.Model, TaskList.LocalsModel>
@inject HttpClient httpClient
@inject ITaskService Tasks
@inject UICommander UICommander

@{
    var locals = MutableState.Value;
    var state = State.LastNonErrorValue;
    var error = State.Error;
}

<MudContainer MaxWidth="MaxWidth.Large">
    <h3>TaskList</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Assignee</th>
                <th>Status</th>
                @*<th>WorkHrs</th>*@
            </tr>
        </thead>
        <tbody>
            @*@if (state.Tasks != null) {*@
                @foreach(var task in state.Tasks)
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.Name</td>
                        <td>@task.Assignee?.Name</td>
                        <td>@task.Status</td>
                        @foreach(var tp in task.Properties)
                        {
                            <td>
                                <MudTextField @bind-Value="tp.Value" Label="Standard" Variant="Variant.Text"
                                  DebounceInterval="300" OnDebounceIntervalElapsed="@(e => OnDebounceIntervalElapsed(e, tp))"></MudTextField>
                            </td>
                        }
                        @*<td>@task.WorkHrs</td>*@
                    </tr>
                }
            @*}*@
        </tbody>
    </table>

@*    <MudDataGrid T="Task" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tasks</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Task" />
            <Column T="Task" Field="Id" Title="Id" Sortable="false" Filterable="false" />
            <Column T="Task" Field="Name" />
            <Column T="Task" Field="Status" />
            <Column T="Task" Field="TaskType" />
            <Column T="Task" Field="WorkHrs" />
            <Column T="Task" Field="CommittedWorkHrs" />
            <Column T="Task" Field="Iteration" />
            <Column T="Task" Field="Assignee" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Task" />
        </PagerContent>
    </MudDataGrid>*@
</MudContainer>

@code {
    //[Inject] private Session Session { get; init; } = null!;

    public class LocalsModel
    {
        private string _name = "";

        public string Name
        {
            get => _name;
            set
            {
                if(_name == value)
                    return;
                _name = value;
                IsNameModified = true;
            }
        }

        public bool IsNameModified { get; set; }
    }

    public record Model
    {
        public IEnumerable<Task>? Tasks { get; init; } = new List<Task>();
    }

    protected override void OnInitialized()
    {
        // Mutable state content is updated implicitly via bind-* here,
        // and since such a change doesn't trigger State recompute + StateHasChanged(),
        // we enable this feat. to make it happen on event.
        MustCallStateHasChangedAfterEvent = true;
        base.OnInitialized();
    }

    protected override MutableState<LocalsModel>.Options GetMutableStateOptions() => new() { InitialValue = new() };

    protected override ComputedState<Model>.Options GetStateOptions() => new() { InitialValue = new() };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var tasks = await Tasks.GetTasks(1, cancellationToken);
        if(!MutableState.Value.IsNameModified) ResetName("Test Name");
        return new Model()
        {
            Tasks = tasks
        };
    }

    private void ResetName(string name)
    {
        MutableState.Value.Name = name;
        MutableState.Value.IsNameModified = false;
        MutableState.Invalidate();
    }

    async void OnDebounceIntervalElapsed(string text, Laminal.Shared.Models.TaskProperty tp)
    {
        Console.WriteLine("OnDebounceIntervalElapsed");
        tp.SetValue(text);
        await Tasks.SetTaskProperty(new SetTaskPropertyCommand(tp.Id, text));
    }
}
