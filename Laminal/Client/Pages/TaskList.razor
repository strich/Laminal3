@page "/tasklist"
@using Laminal.Client.Components.TasksList
@using Laminal.Shared.Services
@using Stl.Fusion.Authentication;
@using Stl.Fusion.Blazor
@using System.Collections.ObjectModel;
@using Stl.Fusion;
@using Stl.Fusion.UI;
@inherits ComputedStateComponent<TaskList.Model>
@inject HttpClient httpClient
@inject ITaskService Tasks
@inject UICommander UICommander

@{
    var state = State.LastNonErrorValue;
    var error = State.Error;
}

<MudContainer MaxWidth="MaxWidth.Large">
    <h3>TaskList</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Assignee</th>
                <th>Status</th>
                @*<th>WorkHrs</th>*@
            </tr>
        </thead>
        <tbody>
            @*@if (state.Tasks != null) {*@
                @foreach(var task in state.Tasks)
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.Name</td>
                        <td>@task.Assignee?.Name</td>
                        <td>@task.Status</td>
                        @foreach(var tp in task.Properties)
                        {
                            <td>
                                <TaskPropertyField TaskPropertyId="@tp.Id"/>
                            </td>
                        }
                        @*<td>@task.WorkHrs</td>*@
                    </tr>
                }
            @*}*@
        </tbody>
    </table>

    <MudButton OnClick="CreateTaskOnClick">Create Task</MudButton>

@*    <MudDataGrid T="Task" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tasks</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Task" />
            <Column T="Task" Field="Id" Title="Id" Sortable="false" Filterable="false" />
            <Column T="Task" Field="Name" />
            <Column T="Task" Field="Status" />
            <Column T="Task" Field="TaskType" />
            <Column T="Task" Field="WorkHrs" />
            <Column T="Task" Field="CommittedWorkHrs" />
            <Column T="Task" Field="Iteration" />
            <Column T="Task" Field="Assignee" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Task" />
        </PagerContent>
    </MudDataGrid>*@
</MudContainer>

@code {
    public record Model
    {
        public IList<Task> Tasks { get; init; } = new List<Task>();
    }

    protected override void OnInitialized()
    {
        // Mutable state content is updated implicitly via bind-* here,
        // and since such a change doesn't trigger State recompute + StateHasChanged(),
        // we enable this feat. to make it happen on event.
        MustCallStateHasChangedAfterEvent = true;
        base.OnInitialized();
    }

    protected override ComputedState<Model>.Options GetStateOptions() => new() { InitialValue = new() };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var model = new Model();
        var taskIds = await Tasks.GetTasks(1, cancellationToken);
        foreach(var taskId in taskIds)
        {
            var task = await Tasks.GetTask(taskId, cancellationToken);
            model.Tasks.Add(task);
        }

        return model;
    }

    async void CreateTaskOnClick()
    {
        await Tasks.CreateTask(new CreateTaskCommand(1, new Task()
        {
            Name = "New Task",
            OwnerProject = new Laminal.Shared.Models.Project()
        }));
    }
}
